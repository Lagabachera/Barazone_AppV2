name: CI Pipeline

on:
  push:
    branches:
      - master
      - staging
  pull_request:
    branches:
      - master
      - staging

jobs:
  test-and-analyze:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        environment: [staging, production]
    
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python environment
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      # Cache dependencies to improve performance
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Install dependencies
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      # Run tests and collect coverage report
      - name: Run tests with coverage
        run: |
          pytest --cov=.

      # Store coverage data
      - name: Save coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml

      # Code Climate Test Coverage Reporting
      - name: Code Climate Quality Analysis
        run: |
          curl -L https://github.com/codeclimate/test-reporter/releases/latest/download/codeclimate-test-reporter-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter before-build
          pytest --junitxml=test-results/junit.xml --cov-report xml --cov=.
          ./cc-test-reporter after-build --exit-code $? --coverage-input-type pytest --id ${{ secrets.CODECLIMATE_TEST_REPORTER_ID }}

  deploy:
    needs: test-and-analyze
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Deploy to staging or production based on environment
      - name: Deploy to environment
        run: |
          if [ "${{ matrix.environment }}" == "staging" ]; then
            echo "Deploying to staging environment..."
            # Add your deployment logic for staging here
          elif [ "${{ matrix.environment }}" == "production" ]; then
            echo "Deploying to production environment..."
            # Add your deployment logic for production here
          fi

  github-copilot:
    needs: [test-and-analyze, deploy]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Trigger GitHub Copilot to suggest code improvements
      - name: GitHub Copilot Code Suggestions
        run: |
          echo "Running GitHub Copilot to check for possible code corrections..."
          # Include logic to trigger Copilot's analysis and suggestions

